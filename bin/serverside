#!/usr/bin/env ruby

require 'rubygems'
require 'serverside'
require 'optparse'

$cmd_config = {
  :host => '0.0.0.0',
  :ports => 8000..8000
}

opts = OptionParser.new do |opts|
  opts.banner = "Usage: serverside start|stop|restart|serve [app1]"
  opts.define_head "ServerSide, a fast and simple web framework for ruby."
  opts.separator ""
  opts.separator "The supplied app path can be directory or file references. \
If the path refers to a directory the system will try to load serverside.rb in \
that directory. If no path is given, the current working directory is assumed."
  opts.separator ""
  opts.separator "* The start, stop and restart commands are used to control the daemon."
  opts.separator "* The serve command is used to start the server without forking."
  opts.separator ""
  opts.separator "Options:"

  opts.on("-h", "--host HOSTNAME", "Host to bind to (default is all IPs)") do |v|
    $cmd_config[:host] = v
  end
  opts.on("-p", "--port NUM", "Port or port range (default is 8000)") do |v|
    $cmd_config[:ports] = (v =~ /\.\./) ? eval(v) : v.to_i..v.to_i 
  end

  # No argument, shows at tail.  This will print an options summary.
  # Try it and see!
  opts.on_tail("-?", "--help", "Show this message") do
    puts opts
    exit
  end

  # Another typical switch to print the version.
  opts.on_tail("-v", "--version", "Show version") do
    class << Gem; attr_accessor :loaded_specs; end
    specs = Gem.loaded_specs['serverside']
    puts "ServerSide #{specs.version} (#{specs.date.strftime '%Y-%m-%d'})"
    exit
  end
end

opts.parse! ARGV
if ARGV.length < 1
  puts opts
  exit
end

$cmd = ARGV.shift
unless %w(start stop restart serve).include?($cmd)
  puts "Invalid command specified. Known commands are: start, stop, restart, serve."
  exit
end

path = ARGV.shift || '.'
if File.file?(path)
  require path
else
  fn = File.join(path, 'serverside.rb')
  require fn if File.file?(fn)
end
unless ServerSide::Router.has_routes?
  ServerSide::Router.default_route {serve_static('.'/@path)}
end

if $cmd == 'serve'
  if $cmd_config[:ports].begin != $cmd_config[:ports].end
    puts "Please specify a single port."
    exit
  end
  puts "Serving at #{$cmd_config[:host]}:#{$cmd_config[:ports].begin}..."
  trap('INT') {exit}
  ServerSide::HTTP::Server.new($cmd_config[:host], $cmd_config[:ports].begin,
    ServerSide::Router)
else
  ServerSide::Application.daemonize($cmd_config, $cmd)
end
